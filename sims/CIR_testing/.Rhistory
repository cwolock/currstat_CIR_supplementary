#   sens_var_est <- mean((phi_1_hat/psihat_2 - phi_2_hat*(psihat_1)/(psihat_2)^2)^2)
#   psihat_2_var_est <- mean(phi_2_hat^2)
#
#   # diff_truth <- psi - psi*pi
#   # sens_truth <- pi
#
#   # diff_bias <- diff_est - diff_truth
#   # sens_bias <- sens_est - sens_truth
#   # sle1_bias <- psihat_sle1 - psi
#   # sle2_bias <- psihat_sle2 - psi
#   # dle_bias <- psihat_2 - psi
#
#   diff_ci <- c(diff_est - 1.96*sqrt(diff_var_est/nrow(dat)), diff_est + 1.96*sqrt(diff_var_est/nrow(dat)))
#   sens_ci <- c(sens_est - 1.96*sqrt(sens_var_est/nrow(dat)), sens_est + 1.96*sqrt(sens_var_est/nrow(dat)))
#   psihat_2_ci <- c(psihat_2 - 1.96*sqrt(psihat_2_var_est/nrow(dat)), psihat_2 + 1.96*sqrt(psihat_2_var_est/nrow(dat)))
#
#   # diff_cov <- ifelse(diff_truth >= diff_ci[1] & diff_truth <= diff_ci[2], 1, 0)
#   # sens_cov <- ifelse(sens_truth >= sens_ci[1] & sens_truth <= sens_ci[2], 1, 0)
#   return(list(bias_est = diff_est, bias_ci = diff_ci, sens_est = sens_est,
#               sens_ci = sens_ci, psihat_1 = psihat_1,psihat_2 = psihat_2,
#               psi_ci = psihat_2_ci))
# }
# n = sample size
# psi = true prevalence
# pi = sensitivity of direct question
generate_data <- function(n, psi, pi, mu1, mu2, ptreat = 0.5, assump){
Y <- rbinom(n = n, size = 1, prob = psi)
if (assump){ # if the combined direct estimate and DLE assumptions hold
D <- rbinom(n = n, size = 1, prob = pi)
D <- Y * D
T1 <- rbinom(n = n, size = 1, prob = ptreat)
B1 <- rbinom(n = n, size = 3, prob = mu1)
T1Y <- T1 * Y
L1 <- B1 + T1Y
B2 <- rbinom(n = n, size = 3, prob = mu2)
T2Y <- (1-T1)* Y
L2 <- B2 + T2Y
} else{
D <- rbinom(n = n, size = 1, prob = pi)
D <- Y * D
direct_liars <- rbinom(n = sum(1-Y), size = 1, prob = 0.05) # these people will say yes to direct q even if no abortion
D[Y == 0] <- direct_liars
T1 <- rbinom(n = n, size = 1, prob = ptreat)
B1 <- rbinom(n = n, size = 3, prob = mu1)
list1_liars <- rbinom(n = n, size = 1, prob = 0.3) # these people won't count abortion on list even if they have it
T1Y <- T1 * Y
T1Y[T1Y == 1 & list1_liars == 1] <- 0
L1 <- B1 + T1Y
B2 <- rbinom(n = n, size = 3, prob = mu2)
list2_liars <- rbinom(n = n, size = 1, prob = 0.3) # these people won't count abortion on list even if they have it
T2Y <- (1-T1)* Y
T2Y[T2Y == 1 & list2_liars == 1] <- 0
L2 <- B2 + T2Y
}
dat = data.frame(D = D,
T1 = T1,
L1 = L1,
L2 = L2)
return(dat)
}
do_one <- function(n, psi, pi, mu1, mu2, ptreat = 0.5, assump){
dat <- generate_data(n = n, psi = psi, pi = pi, mu1 = mu1, mu2 = mu2, ptreat = ptreat, assump = assump)
# Y <- rbinom(n = n, size = 1, prob = psi)
# D <- rbinom(n = n, size = 1, prob = pi)
# D <- Y * D
# T1 <- rbinom(n = n, size = 1, prob = ptreat)
# B1 <- rbinom(n = n, size = 3, prob = mu1)
# T1Y <- T1 * Y
# L1 <- B1 + T1Y
# B2 <- rbinom(n = n, size = 3, prob = mu2)
# T2Y <- (1-T1)* Y
# L2 <- B2 + T2Y
ests <- compute_estimates(dat = dat)
# psihat_1 <- mean(D)
# psihat_2 <- (mean(L1[T1 == 1]) - mean(L1[T1 == 0]) + mean(L2[T2 == 1]) - mean(L2[T2 == 0]))/2
# psihat_sle1 <- mean(L1[T1 == 1]) - mean(L1[T1 == 0])
# psihat_sle2 <- mean(L2[T2 == 1]) - mean(L2[T2 == 0])
# phi_1_hat <- D - psihat_1
# # phi_2_hat <- 2*(L1*(2*T1-1) - T1*(2*mean(B1) + psihat_2) + mean(B1))
# phi_2_hat <- (L1*(2*T1-1) - T1*(2*mean(B1) + psihat_2) + mean(B1)) + (L2*(2*T2-1) - T2*(2*mean(B2) + psihat_2) + mean(B2))
#
# diff_est <- psihat_2 - psihat_1
# sens_est <- psihat_1/psihat_2
#
# diff_var_est <- mean((phi_2_hat - phi_1_hat)^2)
# sens_var_est <- mean((phi_1_hat/psihat_2 - phi_2_hat*(psihat_1)/(psihat_2)^2)^2)
if (assump){
diff_truth <- psi - psi*pi
sens_truth <- pi
} else{
mc_dat <- generate_data(n = 1e7, psi = psi, pi = pi, mu1 = mu1, mu2 = mu2, ptreat = ptreat, assump = FALSE)
mc_ests <- compute_estimates(mc_dat)
diff_truth <- mc_ests$bias_est
sens_truth <- mc_ests$sens_truth
}
bias_bias <- ests$bias_est - diff_truth
sens_bias <- ests$sens_est - sens_truth
# sle1_bias <- psihat_sle1 - psi
# sle2_bias <- psihat_sle2 - psi
# dle_bias <- psihat_2 - psi
# diff_ci <- c(diff_est - 1.96*sqrt(diff_var_est/n), diff_est + 1.96*sqrt(diff_var_est/n))
# sens_ci <- c(sens_est - 1.96*sqrt(sens_var_est/n), sens_est + 1.96*sqrt(sens_var_est/n))
diff_cov <- ifelse(diff_truth >= ests$bias_ci[1] & diff_truth <= ests$bias_ci[2], 1, 0)
sens_cov <- ifelse(sens_truth >= ests$sens_ci[1] & sens_truth <= ests$sens_ci[2], 1, 0)
psi_cov <- ifelse(psi >= ests$psi_ci[1] & psi <= ests$psi_ci[2], 1, 0)
return(data.frame(n = n, psi = psi, pi = pi, mu1 = mu1, mu2 = mu2, ptreat = ptreat, assump = assump,
bias_bias = bias_bias, sens_bias = sens_bias, bias_cov = diff_cov, sens_cov = sens_cov))#,
# psihat_1 = ests$psihat_1, psihat_2 = ests$psihat_2, psi_cov = psi_cov))
}
param_grid <- expand.grid(n = c(500, 1000, 1500, 2000),
psi = c(0.01, 0.05, 0.1),
pi = c(0.5, 0.75, 0.9),
mu1 = c(0.3),
mu2 = c(0.6),
ptreat = c(0.5),
assump = c(TRUE, FALSE))
for (j in 1:nrow(param_grid)){
output <- replicate(500,
do_one(n = param_grid$n[j], psi = param_grid$psi[j], pi = param_grid$pi[j],
mu1 = param_grid$mu1[j], mu2 = param_grid$mu2[j], ptreat = param_grid$ptreat[j],
assump = param_grid$assump[j]),
simplify = FALSE)
sim_output <- lapply(as.list(1:length(output)),
function(x) tibble::add_column(output[[x]]))
sim_output_tib <- do.call(rbind.data.frame, sim_output)
if (j == 1){
pooled_output <- sim_output_tib
} else{
pooled_output <- rbind(pooled_output, sim_output_tib)
}
}
library(tidyverse)
source("/Users/cwolock/Dropbox/UW/MISC/list_experiment/code_for_allie.R")
# compare_estimates <- function(dat){
#   dat$T2 <- 1 - dat$T1
#   mu1_hat <- mean(dat$L1[dat$T1 == 0])
#   mu2_hat <- mean(dat$L2[dat$T2 == 0])
#   psihat_1 <- mean(dat$D)
#   psihat_2 <- (mean(dat$L1[dat$T1 == 1]) - mean(dat$L1[dat$T1 == 0]) + mean(dat$L2[dat$T2 == 1]) - mean(dat$L2[dat$T2 == 0]))/2
#   psihat_sle1 <- mean(dat$L1[dat$T1 == 1]) - mean(dat$L1[dat$T1 == 0])
#   psihat_sle2 <- mean(dat$L2[dat$T2 == 1]) - mean(dat$L2[dat$T2 == 0])
#   phi_1_hat <- dat$D - psihat_1
#   # phi_2_hat <- 2*(L1*(2*T1-1) - T1*(2*mean(B1) + psihat_2) + mean(B1))
#   phi_2_hat <- (dat$L1*(2*dat$T1-1) - dat$T1*(2*mu1_hat + psihat_2) + mu1_hat) + (dat$L2*(2*dat$T2-1) - dat$T2*(2*mu2_hat + psihat_2) + mu2_hat)
#
#   diff_est <- psihat_2 - psihat_1
#   sens_est <- psihat_1/psihat_2
#
#   diff_var_est <- mean((phi_2_hat - phi_1_hat)^2)
#   sens_var_est <- mean((phi_1_hat/psihat_2 - phi_2_hat*(psihat_1)/(psihat_2)^2)^2)
#   psihat_2_var_est <- mean(phi_2_hat^2)
#
#   # diff_truth <- psi - psi*pi
#   # sens_truth <- pi
#
#   # diff_bias <- diff_est - diff_truth
#   # sens_bias <- sens_est - sens_truth
#   # sle1_bias <- psihat_sle1 - psi
#   # sle2_bias <- psihat_sle2 - psi
#   # dle_bias <- psihat_2 - psi
#
#   diff_ci <- c(diff_est - 1.96*sqrt(diff_var_est/nrow(dat)), diff_est + 1.96*sqrt(diff_var_est/nrow(dat)))
#   sens_ci <- c(sens_est - 1.96*sqrt(sens_var_est/nrow(dat)), sens_est + 1.96*sqrt(sens_var_est/nrow(dat)))
#   psihat_2_ci <- c(psihat_2 - 1.96*sqrt(psihat_2_var_est/nrow(dat)), psihat_2 + 1.96*sqrt(psihat_2_var_est/nrow(dat)))
#
#   # diff_cov <- ifelse(diff_truth >= diff_ci[1] & diff_truth <= diff_ci[2], 1, 0)
#   # sens_cov <- ifelse(sens_truth >= sens_ci[1] & sens_truth <= sens_ci[2], 1, 0)
#   return(list(bias_est = diff_est, bias_ci = diff_ci, sens_est = sens_est,
#               sens_ci = sens_ci, psihat_1 = psihat_1,psihat_2 = psihat_2,
#               psi_ci = psihat_2_ci))
# }
# n = sample size
# psi = true prevalence
# pi = sensitivity of direct question
generate_data <- function(n, psi, pi, mu1, mu2, ptreat = 0.5, assump){
Y <- rbinom(n = n, size = 1, prob = psi)
if (assump){ # if the combined direct estimate and DLE assumptions hold
D <- rbinom(n = n, size = 1, prob = pi)
D <- Y * D
T1 <- rbinom(n = n, size = 1, prob = ptreat)
B1 <- rbinom(n = n, size = 3, prob = mu1)
T1Y <- T1 * Y
L1 <- B1 + T1Y
B2 <- rbinom(n = n, size = 3, prob = mu2)
T2Y <- (1-T1)* Y
L2 <- B2 + T2Y
} else{
D <- rbinom(n = n, size = 1, prob = pi)
D <- Y * D
direct_liars <- rbinom(n = sum(1-Y), size = 1, prob = 0.05) # these people will say yes to direct q even if no abortion
D[Y == 0] <- direct_liars
T1 <- rbinom(n = n, size = 1, prob = ptreat)
B1 <- rbinom(n = n, size = 3, prob = mu1)
list1_liars <- rbinom(n = n, size = 1, prob = 0.3) # these people won't count abortion on list even if they have it
T1Y <- T1 * Y
T1Y[T1Y == 1 & list1_liars == 1] <- 0
L1 <- B1 + T1Y
B2 <- rbinom(n = n, size = 3, prob = mu2)
list2_liars <- rbinom(n = n, size = 1, prob = 0.3) # these people won't count abortion on list even if they have it
T2Y <- (1-T1)* Y
T2Y[T2Y == 1 & list2_liars == 1] <- 0
L2 <- B2 + T2Y
}
dat = data.frame(D = D,
T1 = T1,
L1 = L1,
L2 = L2)
return(dat)
}
do_one <- function(n, psi, pi, mu1, mu2, ptreat = 0.5, assump){
dat <- generate_data(n = n, psi = psi, pi = pi, mu1 = mu1, mu2 = mu2, ptreat = ptreat, assump = assump)
# Y <- rbinom(n = n, size = 1, prob = psi)
# D <- rbinom(n = n, size = 1, prob = pi)
# D <- Y * D
# T1 <- rbinom(n = n, size = 1, prob = ptreat)
# B1 <- rbinom(n = n, size = 3, prob = mu1)
# T1Y <- T1 * Y
# L1 <- B1 + T1Y
# B2 <- rbinom(n = n, size = 3, prob = mu2)
# T2Y <- (1-T1)* Y
# L2 <- B2 + T2Y
ests <- compute_estimates(dat = dat)
# psihat_1 <- mean(D)
# psihat_2 <- (mean(L1[T1 == 1]) - mean(L1[T1 == 0]) + mean(L2[T2 == 1]) - mean(L2[T2 == 0]))/2
# psihat_sle1 <- mean(L1[T1 == 1]) - mean(L1[T1 == 0])
# psihat_sle2 <- mean(L2[T2 == 1]) - mean(L2[T2 == 0])
# phi_1_hat <- D - psihat_1
# # phi_2_hat <- 2*(L1*(2*T1-1) - T1*(2*mean(B1) + psihat_2) + mean(B1))
# phi_2_hat <- (L1*(2*T1-1) - T1*(2*mean(B1) + psihat_2) + mean(B1)) + (L2*(2*T2-1) - T2*(2*mean(B2) + psihat_2) + mean(B2))
#
# diff_est <- psihat_2 - psihat_1
# sens_est <- psihat_1/psihat_2
#
# diff_var_est <- mean((phi_2_hat - phi_1_hat)^2)
# sens_var_est <- mean((phi_1_hat/psihat_2 - phi_2_hat*(psihat_1)/(psihat_2)^2)^2)
if (assump){
diff_truth <- psi - psi*pi
sens_truth <- pi
} else{
mc_dat <- generate_data(n = 1e7, psi = psi, pi = pi, mu1 = mu1, mu2 = mu2, ptreat = ptreat, assump = FALSE)
mc_ests <- compute_estimates(mc_dat)
diff_truth <- mc_ests$bias_est
sens_truth <- mc_ests$sens_est
}
bias_bias <- ests$bias_est - diff_truth
sens_bias <- ests$sens_est - sens_truth
# sle1_bias <- psihat_sle1 - psi
# sle2_bias <- psihat_sle2 - psi
# dle_bias <- psihat_2 - psi
# diff_ci <- c(diff_est - 1.96*sqrt(diff_var_est/n), diff_est + 1.96*sqrt(diff_var_est/n))
# sens_ci <- c(sens_est - 1.96*sqrt(sens_var_est/n), sens_est + 1.96*sqrt(sens_var_est/n))
diff_cov <- ifelse(diff_truth >= ests$bias_ci[1] & diff_truth <= ests$bias_ci[2], 1, 0)
sens_cov <- ifelse(sens_truth >= ests$sens_ci[1] & sens_truth <= ests$sens_ci[2], 1, 0)
psi_cov <- ifelse(psi >= ests$psi_ci[1] & psi <= ests$psi_ci[2], 1, 0)
return(data.frame(n = n, psi = psi, pi = pi, mu1 = mu1, mu2 = mu2, ptreat = ptreat, assump = assump,
bias_bias = bias_bias, sens_bias = sens_bias, bias_cov = diff_cov, sens_cov = sens_cov))#,
# psihat_1 = ests$psihat_1, psihat_2 = ests$psihat_2, psi_cov = psi_cov))
}
param_grid <- expand.grid(n = c(500, 1000, 1500, 2000),
psi = c(0.01, 0.05, 0.1),
pi = c(0.5, 0.75, 0.9),
mu1 = c(0.3),
mu2 = c(0.6),
ptreat = c(0.5),
assump = c(TRUE, FALSE))
for (j in 1:nrow(param_grid)){
output <- replicate(500,
do_one(n = param_grid$n[j], psi = param_grid$psi[j], pi = param_grid$pi[j],
mu1 = param_grid$mu1[j], mu2 = param_grid$mu2[j], ptreat = param_grid$ptreat[j],
assump = param_grid$assump[j]),
simplify = FALSE)
sim_output <- lapply(as.list(1:length(output)),
function(x) tibble::add_column(output[[x]]))
sim_output_tib <- do.call(rbind.data.frame, sim_output)
if (j == 1){
pooled_output <- sim_output_tib
} else{
pooled_output <- rbind(pooled_output, sim_output_tib)
}
}
library(survML)
install.packages("survML")
library(survML)
library(tidyverse)
setwd("/Users/cwolock/Dropbox/UW/DISSERTATION/chu_lab/susan/code/CIR_testing/")
dat <- readRDS("CIR_testing_bigN.rds")
dat <- dat %>% mutate(err = cdf_estimate - truth,
cov = ifelse(cil <= truth & ciu >= truth, 1, 0),
width = ciu - cil,
sq_err = (cdf_estimate - truth)^2,
scaled_err = (n^(1/3))*(cdf_estimate - truth))
dat <- dat %>% filter(round(truth, digits = 2) <= 0.95 & round(truth, digits = 2) >= 0.05) %>%
mutate(nonresponse = factor(nonresponse, levels = c("mcar", "mar"),
labels = c("MCAR", "MAR")),
method = factor(method, levels = c("ignore", "handle"),
labels = c("Complete case CIR", "Extended CIR")),
n = factor(n))
summ <- dat %>% group_by(n, nonresponse, method, truth) %>%
summarize(nreps = n(),
bias = mean(err),
scaled_bias = mean(scaled_err),
bias_mc_se = sqrt(mean((err - bias)^2)/nreps),
scaled_bias_mc_se = sqrt(mean((scaled_err - scaled_bias)^2)/nreps),
coverage = mean(cov),
coverage_mc_se = sqrt(coverage*(1-coverage)/nreps),
width = mean(width),
mse = mean(sq_err)) %>%
mutate(bias_mc_cil = bias - 1.96 * bias_mc_se,
bias_mc_ciu = bias + 1.96 * bias_mc_se,
scaled_bias_mc_cil = scaled_bias - 1.96 * scaled_bias_mc_se,
scaled_bias_mc_ciu = scaled_bias + 1.96 * scaled_bias_mc_se,
coverage_mc_cil = coverage - 1.96 * coverage_mc_se,
coverage_mc_ciu = coverage + 1.96 * coverage_mc_se)
p_bias <- summ %>% ggplot(aes(x = truth, group = n)) +
geom_line(aes(y = bias, linetype = n, color = n)) +
facet_grid(method~nonresponse) +
theme_bw() +
geom_hline(yintercept = 0, color = "black") +
ylab("Bias") +
xlab("Symptom resolution probability") +
ggtitle("Missingness mechanism") +
scale_linetype_manual(name = "Sample size", values = c("dotted", "dashed", "longdash", "solid")) +
scale_color_discrete(name = "Sample size") +
scale_y_continuous(breaks = c(-0.03, -0.02, -0.01, 0, 0.01, 0.02, 0.03),
labels = c("-0.03", "-0.02", "-0.01", "0.00", "0.01", "0.02", "0.03"),
limits = c(-0.03, 0.03),
sec.axis = sec_axis(~ . , name = "Method",
labels = NULL, breaks = NULL)) +
theme( plot.title = element_text(hjust = 0.5, size = 12, family = "Times New Roman"),
strip.background = element_blank(),
legend.position = "bottom",
axis.text = element_text(family = "Times New Roman"),
axis.title = element_text(family = "Times New Roman"),
strip.text = element_text(family = "Times New Roman"),
legend.title = element_text(family = "Times New Roman"),
legend.text = element_text(family = "Times New Roman"))
p_scaled_bias <- summ %>% ggplot(aes(x = truth, group = n)) +
geom_line(aes(y = scaled_bias, linetype = n, color = n)) +
facet_grid(method~nonresponse) +
theme_bw() +
ylab(expression(paste(n^{1/3}, "x bias"))) +
xlab("Symptom resolution probability") +
ggtitle("Missingness mechanism") +
scale_linetype_manual(name = "Sample size", values = c("dotted", "dashed", "longdash", "solid")) +
scale_color_discrete(name = "Sample size") +
geom_hline(yintercept = 0, color = "black") +
scale_y_continuous(breaks = c(-0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3),
labels = c("-0.3", "-0.2", "-0.1", "0.0", "0.1", "0.2", "0.3"),
limits = c(-0.3, 0.3),
sec.axis = sec_axis(~ . , name = "Method",
labels = NULL, breaks = NULL)) +
theme( plot.title = element_text(hjust = 0.5, size = 12, family = "Times New Roman"),
strip.background = element_blank(),
legend.position = "bottom",
axis.text = element_text(family = "Times New Roman"),
axis.title = element_text(family = "Times New Roman"),
strip.text = element_text(family = "Times New Roman"),
legend.title = element_text(family = "Times New Roman"),
legend.text = element_text(family = "Times New Roman"))
p_coverage <- summ %>% ggplot(aes(x = truth, group = n)) +
geom_line(aes(y = coverage, linetype = n, color = n)) +
facet_grid(method~nonresponse) +
theme_bw() +
ylab("Coverage") +
xlab("Symptom resolution probability") +
ggtitle("Missingness mechanism") +
scale_linetype_manual(name = "Sample size", values = c("dotted", "dashed", "longdash", "solid")) +
scale_color_discrete(name = "Sample size") +
geom_hline(yintercept = 0.95, color = "black") +
scale_y_continuous(breaks = c(0.7, 0.8, 0.9, 1.0),
labels = c("0.7", "0.8", "0.9", "1.0"),
limits = c(0.7, 1),
sec.axis = sec_axis(~ . , name = "Method",
labels = NULL, breaks = NULL)) +
theme( plot.title = element_text(hjust = 0.5, size = 12, family = "Times New Roman"),
strip.background = element_blank(),
legend.position = "bottom",
axis.text = element_text(family = "Times New Roman"),
axis.title = element_text(family = "Times New Roman"),
strip.text = element_text(family = "Times New Roman"),
legend.title = element_text(family = "Times New Roman"),
legend.text = element_text(family = "Times New Roman"))
ggsave(filename = "/Users/cwolock/Dropbox/UW/DISSERTATION/chu_lab/susan/code/CIR_testing/scaled_bias_plot_032524.pdf",
plot = p_scaled_bias,
device = "pdf",
width = 7,
height = 5,
dpi = 300,
units = "in")
library(tidyverse)
library(extrafont)
# font_import(prompt = FALSE)
loadfonts(device = "all")
setwd("/Users/cwolock/Dropbox/UW/DISSERTATION/chu_lab/susan/code/CIR_testing/")
dat <- readRDS("CIR_testing_bigN.rds")
dat <- dat %>% mutate(err = cdf_estimate - truth,
cov = ifelse(cil <= truth & ciu >= truth, 1, 0),
width = ciu - cil,
sq_err = (cdf_estimate - truth)^2,
scaled_err = (n^(1/3))*(cdf_estimate - truth))
dat <- dat %>% filter(round(truth, digits = 2) <= 0.95 & round(truth, digits = 2) >= 0.05) %>%
mutate(nonresponse = factor(nonresponse, levels = c("mcar", "mar"),
labels = c("MCAR", "MAR")),
method = factor(method, levels = c("ignore", "handle"),
labels = c("Complete case CIR", "Extended CIR")),
n = factor(n))
summ <- dat %>% group_by(n, nonresponse, method, truth) %>%
summarize(nreps = n(),
bias = mean(err),
scaled_bias = mean(scaled_err),
bias_mc_se = sqrt(mean((err - bias)^2)/nreps),
scaled_bias_mc_se = sqrt(mean((scaled_err - scaled_bias)^2)/nreps),
coverage = mean(cov),
coverage_mc_se = sqrt(coverage*(1-coverage)/nreps),
width = mean(width),
mse = mean(sq_err)) %>%
mutate(bias_mc_cil = bias - 1.96 * bias_mc_se,
bias_mc_ciu = bias + 1.96 * bias_mc_se,
scaled_bias_mc_cil = scaled_bias - 1.96 * scaled_bias_mc_se,
scaled_bias_mc_ciu = scaled_bias + 1.96 * scaled_bias_mc_se,
coverage_mc_cil = coverage - 1.96 * coverage_mc_se,
coverage_mc_ciu = coverage + 1.96 * coverage_mc_se)
p_bias <- summ %>% ggplot(aes(x = truth, group = n)) +
geom_line(aes(y = bias, linetype = n, color = n)) +
facet_grid(method~nonresponse) +
theme_bw() +
geom_hline(yintercept = 0, color = "black") +
ylab("Bias") +
xlab("Symptom resolution probability") +
ggtitle("Missingness mechanism") +
scale_linetype_manual(name = "Sample size", values = c("dotted", "dashed", "longdash", "solid")) +
scale_color_discrete(name = "Sample size") +
scale_y_continuous(breaks = c(-0.03, -0.02, -0.01, 0, 0.01, 0.02, 0.03),
labels = c("-0.03", "-0.02", "-0.01", "0.00", "0.01", "0.02", "0.03"),
limits = c(-0.03, 0.03),
sec.axis = sec_axis(~ . , name = "Method",
labels = NULL, breaks = NULL)) +
theme( plot.title = element_text(hjust = 0.5, size = 12, family = "Times New Roman"),
strip.background = element_blank(),
legend.position = "bottom",
axis.text = element_text(family = "Times New Roman"),
axis.title = element_text(family = "Times New Roman"),
strip.text = element_text(family = "Times New Roman"),
legend.title = element_text(family = "Times New Roman"),
legend.text = element_text(family = "Times New Roman"))
p_scaled_bias <- summ %>% ggplot(aes(x = truth, group = n)) +
geom_line(aes(y = scaled_bias, linetype = n, color = n)) +
facet_grid(method~nonresponse) +
theme_bw() +
ylab(expression(paste(n^{1/3}, "x bias"))) +
xlab("Symptom resolution probability") +
ggtitle("Missingness mechanism") +
scale_linetype_manual(name = "Sample size", values = c("dotted", "dashed", "longdash", "solid")) +
scale_color_discrete(name = "Sample size") +
geom_hline(yintercept = 0, color = "black") +
scale_y_continuous(breaks = c(-0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3),
labels = c("-0.3", "-0.2", "-0.1", "0.0", "0.1", "0.2", "0.3"),
limits = c(-0.3, 0.3),
sec.axis = sec_axis(~ . , name = "Method",
labels = NULL, breaks = NULL)) +
theme( plot.title = element_text(hjust = 0.5, size = 12, family = "Times New Roman"),
strip.background = element_blank(),
legend.position = "bottom",
axis.text = element_text(family = "Times New Roman"),
axis.title = element_text(family = "Times New Roman"),
strip.text = element_text(family = "Times New Roman"),
legend.title = element_text(family = "Times New Roman"),
legend.text = element_text(family = "Times New Roman"))
p_coverage <- summ %>% ggplot(aes(x = truth, group = n)) +
geom_line(aes(y = coverage, linetype = n, color = n)) +
facet_grid(method~nonresponse) +
theme_bw() +
ylab("Coverage") +
xlab("Symptom resolution probability") +
ggtitle("Missingness mechanism") +
scale_linetype_manual(name = "Sample size", values = c("dotted", "dashed", "longdash", "solid")) +
scale_color_discrete(name = "Sample size") +
geom_hline(yintercept = 0.95, color = "black") +
scale_y_continuous(breaks = c(0.7, 0.8, 0.9, 1.0),
labels = c("0.7", "0.8", "0.9", "1.0"),
limits = c(0.7, 1),
sec.axis = sec_axis(~ . , name = "Method",
labels = NULL, breaks = NULL)) +
theme( plot.title = element_text(hjust = 0.5, size = 12, family = "Times New Roman"),
strip.background = element_blank(),
legend.position = "bottom",
axis.text = element_text(family = "Times New Roman"),
axis.title = element_text(family = "Times New Roman"),
strip.text = element_text(family = "Times New Roman"),
legend.title = element_text(family = "Times New Roman"),
legend.text = element_text(family = "Times New Roman"))
ggsave(filename = "/Users/cwolock/Dropbox/UW/DISSERTATION/chu_lab/susan/code/CIR_testing/scaled_bias_plot_032524.pdf",
plot = p_scaled_bias,
device = "pdf",
width = 7,
height = 5,
dpi = 300,
units = "in")
ggsave(filename = "/Users/cwolock/Dropbox/UW/DISSERTATION/chu_lab/susan/code/CIR_testing/bias_plot_032524.pdf",
plot = p_bias,
device = "pdf",
width = 7,
height = 5,
dpi = 300,
units = "in")
ggsave(filename = "/Users/cwolock/Dropbox/UW/DISSERTATION/chu_lab/susan/code/CIR_testing/coverage_plot_032524.pdf",
plot = p_coverage,
device = "pdf",
width = 7,
height = 5,
dpi = 300,
units = "in")
